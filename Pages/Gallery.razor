@page "/gallery"
@using System.Net.Http
@using System.Net.Http.Json
@using NET_Azure_Meetup_Stajerska_website.Data
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container py-5">
    <main>
        @if (pastEvents == null)
        {
            <p><em>Loading galleries...</em></p>
        }
        else
        {
            @foreach (var ev in pastEvents.Where(e => e.Images != null && e.Images.Length > 0))
            {
                <section class="mb-5">
                    <h2 class="h3 text-primary mb-4 border-bottom pb-2">@ev.Title</h2>
                    <div class="card">
                        <div class="card-body p-4">
                            <div class="row g-3">
                                @foreach (var image in ev.Images)
                                {
                                    <div class="col-lg-3 col-md-4 col-sm-6 col-12">
                                        <a href="@(NavigationManager.BaseUri + image.Full.TrimStart('/'))" data-fancybox="gallery-@ev.Id">
                                            <img src="@(NavigationManager.BaseUri + image.Thumbnail.TrimStart('/'))" class="img-fluid img-thumbnail" alt="Event Image">
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </section>
            }
        }
    </main>
</div>

@code {
    private PastEvent[]? pastEvents;
    private bool _fancyboxInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pastEvents = await Http.GetFromJsonAsync<PastEvent[]>("Data/PastEvents.json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading galleries: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (pastEvents != null && !_fancyboxInitialized)
        {
            _fancyboxInitialized = true;
            await JSRuntime.InvokeVoidAsync("initializeFancybox");
        }
    }
}
